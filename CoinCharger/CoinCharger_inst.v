// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.


// Generated by Quartus Prime Version 18.1 (Build Build 625 09/12/2018)
// Created on Wed May 22 17:16:52 2024

CoinCharger CoinCharger_inst
(
	.c1(c1_sig) ,	// input  c1_sig
	.c2(c2_sig) ,	// input  c2_sig
	.c4(c4_sig) ,	// input  c4_sig
	.c5(c5_sig) ,	// input  c5_sig
	.B23(B23_sig) ,	// input  B23_sig
	.a(a_sig) ,	// output  a_sig
	.b(b_sig) ,	// output  b_sig
	.c(c_sig) ,	// output  c_sig
	.d(d_sig) ,	// output  d_sig
	.e(e_sig) ,	// output  e_sig
	.f(f_sig) ,	// output  f_sig
	.g(g_sig) ,	// output  g_sig
	.a1(a1_sig) ,	// output  a1_sig
	.b2(b2_sig) ,	// output  b2_sig
	.c3(c3_sig) ,	// output  c3_sig
	.d4(d4_sig) ,	// output  d4_sig
	.e5(e5_sig) ,	// output  e5_sig
	.f6(f6_sig) ,	// output  f6_sig
	.g7(g7_sig) ,	// output  g7_sig
	.a8(a8_sig) ,	// output  a8_sig
	.b9(b9_sig) ,	// output  b9_sig
	.c10(c10_sig) ,	// output  c10_sig
	.d11(d11_sig) ,	// output  d11_sig
	.e12(e12_sig) ,	// output  e12_sig
	.f13(f13_sig) ,	// output  f13_sig
	.g14(g14_sig) ,	// output  g14_sig
	.a15(a15_sig) ,	// output  a15_sig
	.b16(b16_sig) ,	// output  b16_sig
	.c17(c17_sig) ,	// output  c17_sig
	.d18(d18_sig) ,	// output  d18_sig
	.e19(e19_sig) ,	// output  e19_sig
	.f20(f20_sig) ,	// output  f20_sig
	.g21(g21_sig) ,	// output  g21_sig
	.clk_o(clk_o_sig) ,	// output  clk_o_sig
	.R4(R4_sig) ,	// output  R4_sig
	.R3(R3_sig) ,	// output  R3_sig
	.R2(R2_sig) ,	// output  R2_sig
	.R1(R1_sig) 	// output  R1_sig
);

