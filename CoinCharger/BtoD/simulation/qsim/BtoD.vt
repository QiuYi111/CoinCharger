// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/14/2024 09:26:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    BtoD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BtoD_vlg_sample_tst(
	n_0,
	n_1,
	n_2,
	n_3,
	n_4,
	n_5,
	n_6,
	n_7,
	n_8,
	n_9,
	sampler_tx
);
input  n_0;
input  n_1;
input  n_2;
input  n_3;
input  n_4;
input  n_5;
input  n_6;
input  n_7;
input  n_8;
input  n_9;
output sampler_tx;

reg sample;
time current_time;
always @(n_0 or n_1 or n_2 or n_3 or n_4 or n_5 or n_6 or n_7 or n_8 or n_9)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module BtoD_vlg_check_tst (
	N,
	sampler_rx
);
input [3:0] N;
input sampler_rx;

reg [3:0] N_expected;

reg [3:0] N_prev;

reg [3:0] N_expected_prev;

reg [3:0] last_N_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	N_prev = N;
end

// update expected /o prevs

always @(trigger)
begin
	N_expected_prev = N_expected;
end


// expected N[ 3 ]
initial
begin
	N_expected[3] = 1'bX;
end 
// expected N[ 2 ]
initial
begin
	N_expected[2] = 1'bX;
end 
// expected N[ 1 ]
initial
begin
	N_expected[1] = 1'bX;
end 
// expected N[ 0 ]
initial
begin
	N_expected[0] = 1'bX;
end 
// generate trigger
always @(N_expected or N)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected N = %b | ",N_expected_prev);
	$display("| real N = %b | ",N_prev);
`endif
	if (
		( N_expected_prev[0] !== 1'bx ) && ( N_prev[0] !== N_expected_prev[0] )
		&& ((N_expected_prev[0] !== last_N_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[0] = N_expected_prev[0];
	end
	if (
		( N_expected_prev[1] !== 1'bx ) && ( N_prev[1] !== N_expected_prev[1] )
		&& ((N_expected_prev[1] !== last_N_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[1] = N_expected_prev[1];
	end
	if (
		( N_expected_prev[2] !== 1'bx ) && ( N_prev[2] !== N_expected_prev[2] )
		&& ((N_expected_prev[2] !== last_N_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[2] = N_expected_prev[2];
	end
	if (
		( N_expected_prev[3] !== 1'bx ) && ( N_prev[3] !== N_expected_prev[3] )
		&& ((N_expected_prev[3] !== last_N_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_N_exp[3] = N_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module BtoD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg n_0;
reg n_1;
reg n_2;
reg n_3;
reg n_4;
reg n_5;
reg n_6;
reg n_7;
reg n_8;
reg n_9;
// wires                                               
wire [3:0] N;

wire sampler;                             

// assign statements (if any)                          
BtoD i1 (
// port map - connection between master ports and signals/registers   
	.N(N),
	.n_0(n_0),
	.n_1(n_1),
	.n_2(n_2),
	.n_3(n_3),
	.n_4(n_4),
	.n_5(n_5),
	.n_6(n_6),
	.n_7(n_7),
	.n_8(n_8),
	.n_9(n_9)
);

// n_0
initial
begin
	n_0 = 1'b0;
	n_0 = #40000 1'b1;
	n_0 = #40000 1'b0;
end 

// n_1
initial
begin
	n_1 = 1'b0;
	n_1 = #80000 1'b1;
	n_1 = #40000 1'b0;
end 

// n_2
initial
begin
	n_2 = 1'b0;
	n_2 = #140000 1'b1;
	n_2 = #40000 1'b0;
end 

// n_3
initial
begin
	n_3 = 1'b0;
	n_3 = #180000 1'b1;
	n_3 = #40000 1'b0;
end 

// n_4
initial
begin
	n_4 = 1'b0;
	n_4 = #220000 1'b1;
	n_4 = #60000 1'b0;
end 

// n_5
initial
begin
	n_5 = 1'b0;
	n_5 = #300000 1'b1;
	n_5 = #40000 1'b0;
end 

// n_6
initial
begin
	n_6 = 1'b0;
	n_6 = #340000 1'b1;
	n_6 = #60000 1'b0;
end 

// n_7
initial
begin
	n_7 = 1'b0;
	n_7 = #400000 1'b1;
	n_7 = #80000 1'b0;
end 

// n_8
initial
begin
	n_8 = 1'b0;
	n_8 = #480000 1'b1;
	n_8 = #80000 1'b0;
end 

// n_9
initial
begin
	n_9 = 1'b0;
	n_9 = #560000 1'b1;
	n_9 = #80000 1'b0;
end 

BtoD_vlg_sample_tst tb_sample (
	.n_0(n_0),
	.n_1(n_1),
	.n_2(n_2),
	.n_3(n_3),
	.n_4(n_4),
	.n_5(n_5),
	.n_6(n_6),
	.n_7(n_7),
	.n_8(n_8),
	.n_9(n_9),
	.sampler_tx(sampler)
);

BtoD_vlg_check_tst tb_out(
	.N(N),
	.sampler_rx(sampler)
);
endmodule

